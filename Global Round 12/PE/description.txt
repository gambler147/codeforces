A society can be represented by a connected, undirected graph of 𝑛 vertices and
𝑚 edges. The vertices represent people, and an edge (𝑖,𝑗) represents a
friendship between people 𝑖 and 𝑗.

In society, the 𝑖-th person has an income 𝑎𝑖. A person 𝑖 is envious of
person 𝑗 if 𝑎𝑗=𝑎𝑖+1. That is if person 𝑗 has exactly 1 more unit of income
than person 𝑖.

The society is called capitalist if for every pair of friends one is envious of
the other. For some friendships, you know which friend is envious of the other.
For the remaining friendships, you do not know the direction of envy.

The income inequality of society is defined as max1≤𝑖≤𝑛𝑎𝑖−min1≤𝑖≤𝑛𝑎𝑖.

You only know the friendships and not the incomes. If it is impossible for this
society to be capitalist with the given knowledge, you should report about it.
Otherwise, you should find an assignment of incomes in which the society is
capitalist, and the income inequality is maximized.

Input The first line contains two integers 𝑛, 𝑚 (1≤𝑛≤200, 𝑛−1≤𝑚≤2000) — the
number of people and friendships, respectively.

The following 𝑚 lines describe the friendships. Each friendship is described by
three integers 𝑖, 𝑗, 𝑏 (1≤𝑖,𝑗≤𝑛,𝑖≠𝑗,0≤𝑏≤1). This denotes that people 𝑖
and 𝑗 are friends. If 𝑏=1, we require that person 𝑖 is envious of person 𝑗.
If 𝑏=0, one friend should be envious of the other in either direction.

There is at most one friendship between each pair of people. It is guaranteed
that if we consider the friendships as undirected edges, the graph is connected.

Output Print "YES" if it is possible that the society is capitalist, or "NO"
otherwise. You can print characters in any case (upper or lower).

If the answer is "YES", you should print two additional lines. In the first
line, print the maximum possible income inequality. On the next line you should
print 𝑛 integers 𝑎1,…,𝑎𝑛 (0≤𝑎𝑖≤106), where 𝑎𝑖 denotes the income of the
𝑖-th person.

We can prove that if there exists a solution, there exists one where 0≤𝑎𝑖≤106
for all 𝑖.

If there exist multiple solutions, print any.

Examples inputCopy 6 6 1 2 0 3 2 0 2 5 0 6 5 1 6 3 0 2 4 1 outputCopy YES 3 3 2
1 3 1 0 inputCopy 4 4 1 2 1 2 3 0 3 4 1 4 1 1 outputCopy NO inputCopy 1 0
outputCopy YES 0 0 