The only difference between the easy and hard versions is that tokens of type O
do not appear in the input of the easy version.

Errichto gave Monogon the following challenge in order to intimidate him from
taking his top contributor spot on Codeforces.

In a Tic-Tac-Toe grid, there are 𝑛 rows and 𝑛 columns. Each cell of the grid
is either empty or contains a token. There are two types of tokens: X and O. If
there exist three tokens of the same type consecutive in a row or column, it is
a winning configuration. Otherwise, it is a draw configuration.

The patterns in the first row are winning configurations. The patterns in the
second row are draw configurations. In an operation, you can change an X to an
O, or an O to an X. Let 𝑘 denote the total number of tokens in the grid. Your
task is to make the grid a draw in at most ⌊𝑘3⌋ (rounding down) operations.

You are not required to minimize the number of operations.

Input The first line contains a single integer 𝑡 (1≤𝑡≤100) — the number of
test cases.

The first line of each test case contains a single integer 𝑛 (1≤𝑛≤300) — the
size of the grid.

The following 𝑛 lines each contain a string of 𝑛 characters, denoting the
initial grid. The character in the 𝑖-th row and 𝑗-th column is '.' if the cell
is empty, or it is the type of token in the cell: 'X' or 'O'.

It is guaranteed that not all cells are empty.

In the easy version, the character 'O' does not appear in the input.

The sum of 𝑛 across all test cases does not exceed 300.

Output For each test case, print the state of the grid after applying the
operations.

We have proof that a solution always exists. If there are multiple solutions,
print any.

Example inputCopy 3 3 .X. XXX .X. 6 XX.XXX XXXXXX XXX.XX XXXXXX XX.X.X XXXXXX 5
XXX.X .X..X XXX.X ..X.. ..X.. outputCopy .X. XOX .X. XX.XXO XOXXOX OXX.XX XOOXXO
XX.X.X OXXOXX XOX.X .X..X XXO.O ..X.. ..X..